/*
 * pool.hpp
 *
 *  Created on: 19.7.2012
 *      Author: akin
 *
 * To support somesort of constructor and destructor, the items used with this pool
 * must have functions:
 *   void onCreate()
 *   void onRelease();
 * the create will be called upon object that has just been created, and the release
 * will be called at the time of release..
 */

#ifndef POOL_HPP_
#define POOL_HPP_

#include <tset>

namespace orion
{

template <class CType>
class Pool
{
protected:
	typedef TSet<CType> PointerSet;
	PointerSet freelist;
	PointerSet blocklist;
	uint blocksize;
	uint total;
public:
	Pool( uint blocksize = 32 )
	: blocksize( blocksize )
	{
	}

	~Pool()
	{
		while( CType *block = blocklist.pop() )
		{
			delete[] block;
		}
		blocklist.clear();
		freelist.clear();
	}

	CType *create()
	{
		CType *item = freelist.pop();
		if( item == NULL )
		{
			// create more..
			// first is reserved for use.
			total += blocksize;
			item = new CType[blocksize];
			for( int i = 1 ; i < blocksize ; ++i )
			{
				freelist.push( &(item[i]) );
			}
		}
		item->onCreate();
		return item;
	}

	void release( CType *item )
	{
		if( item == NULL )
		{
			return;
		}
		// In theory the check if item really is in a block, could be usefull.. but.. naah.. too much trouble..
		item->onRelease();
		freelist.push( item );
	}
	
	// Reserve n empty more items
	void reserve( uint requested )
	{
		CType *item = new CType[requested];
		total += requested;
		for( uint i = 0 ; i < requested ; ++i )
		{
			freelist.push( &(item[i]) );
		}
	}
	
	uint sizeFree()
	{
		return freelist.size();
	}
	
	uint size()
	{
		return total;
	}
};

} // namespace orion 
#endif // POOL_HPP_ 
