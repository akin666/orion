
#ifndef TQUE_H_
#define TQUE_H_

#include <iostream>
#include <deque>
#include <uthread>

template <class tclass>
class TQue
{
public:
	static const unsigned int NO_FLAGS = 0x0000;
	static const unsigned int RETURN_NULL_IF_EMPTY = 0x0001;
protected:
	std::mutex mutex;
	std::condition_variable condition;
	std::deque< tclass > data;
	unsigned int data_count;
public:
	TQue() : data_count(0) {}
	virtual ~TQue(){}

	// blocking, but pushes as fast as possible
	void push( tclass package );

	// blocking.
	tclass pop( unsigned char flags = NO_FLAGS );
};

template <class tclass>
void TQue<tclass>::push( tclass package )
{
	std::lock_guard<std::mutex> lock(mutex);

	data.push_back( package );
	++data_count;

	condition.notify_one();
}

template <class tclass>
tclass TQue<tclass>::pop( unsigned char flags )
{
	std::unique_lock<std::mutex> lock(mutex);

	if( (flags & RETURN_NULL_IF_EMPTY) != 0 )
	{
		if( data.empty() )
		{
			 return NULL;
		}
	}
	else
	{
		while( data.empty() )
		{
			condition.wait(lock);
		}
	}

	tclass popped = data.front();
	data.pop_front();
	--data_count;

	return popped;
}

#endif // TQUE_H_ 
