/*
 * engine
 * - collection of systems
 *
 *  Created on: 6.7.2012
 *      Author: akin
 */

#ifndef _ENGINE_HPP_
#define _ENGINE_HPP_

#include <orion>
#include <video.hpp>
#include <audio/audio.hpp>
#include <allocator>
#include <system/scheduler.hpp>
#include <config/config.hpp>
#include <loader>
#include <threadpool>

namespace orion
{

template < 	
			class ApplicationPolicy ,	// interface: application/applicationinterface.hpp
			class ConfigLoader ,		// interface: loader (Loader<Config>)
			class VideoPolicy ,			// interface: video/video.hpp
			class AudioPolicy ,			// interface: audio/audio.hpp
			class LogPolicy ,			// interface: log/log.hpp
			class AllocationManager 	// interface: allocator
			>
class Engine
{
protected:
	ApplicationPolicy *app;
	VideoPolicy video;
	AudioPolicy audio;
	LogPolicy log;
	AllocationManager allocation;
	Scheduler scheduler;
	Config config;
	ThreadPool tpool;
	
	StringSet args;
public:
	Engine()
	: app( NULL )
	{
	}
	
	~Engine()
	{
		delete app;
		app = NULL;
	}
	
	bool initialize( int argc = 0 , char *argv[] = NULL )
	{
		// convert c style args
		StringSet arguments;
		for( int i = 0 ; i < argc ; ++i )
		{
			arguments.push_back( argv[i] );
		}

		return initialize( arguments );
	}
	
	bool initialize( StringSet& args )
	{
		this->args = args;
		
		////
		// initialize stuffs
		////
		
		// LOG
		Global<Log>::set( &log );

		// CONFIG
		{
			ConfigLoader loader;
			if( !loader.load( config ) )
			{
				LOG->error("Failed to load config. Bailing out.");
				return false;
			}
			Global<Config>::set( &config );
		}
		
		// Scheduler!
		Global<Scheduler>::set( &scheduler );
		
		// StateMachine.
		Global<StateStack>::set( &scheduler );
		
		// MEMORYMANAGER
		if( !allocation.initialize() )
		{
			LOG->error("Failed to initialize memory manager. Bailing out.");
			return false;
		}
		Global<Allocator>::set( &allocation );
		
		// ThreadPool
		try
		{
			int tcount = ThreadPool::getHardwareThreadCount();
			if( tcount <= 0 ) 
			{
				tcount = 1;
			}
			tpool.initialize( tcount );
			Global<ThreadPool>::set( &tpool );
			}
		catch( ... )
		{
			LOG->error("Failed to initialize ThreadPools. Bailing out.");
			return false;
		}
		
		// VIDEO
		if( !video.initialize() )
		{
			LOG->error("Failed to initialize video manager. Bailing out.");
			return false;
		}
		Global<Video>::set( &video );
		scheduler.set( &video ); // scheduler needs to know this.
		
		// AUDIO
		if( !audio.initialize() )
		{
			LOG->error("Failed to initialize audio manager. Bailing out.");
			return false;
		}
		Global<Audio>::set( &audio );
		
		/////
		//// Setup application!
		// late instantiation, to make sure that all the essential engine parts are up and running at this point.
		// APP
		app = new ApplicationPolicy;
		if( !app->initialize( args ) )
		{
			LOG->error("Failed to initialize application. Bailing out.");
			return false;
		}
		Global<ApplicationInterface>::set( app );
		
		return true;
	}

	bool stillRunning()
	{
		return app->stillRunning();
	}

	void run()
	{
		scheduler.run();
	}
};

} // namespace orion
#endif // _ENGINE_HPP_
